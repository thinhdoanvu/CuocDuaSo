HOW TO INSTALL OPENCV 4.1.2 ON UBUNTU 18.04

Step 0. Check python3 is already or not

python3 --version
#Python 3.7.3


Step 1. Test python3

python3
>> print("OpenCV + Ubuntu 18.04!")
OpenCV + Ubuntu 18.04!
>> quit()


Step 2. we need to refresh/upgrade the pre-installed packages/libraries with the apt-get package manager

sudo apt-get update
sudo apt-get upgrade


Step 3. install developer tools

sudo apt-get install build-essential cmake unzip pkg-config


Step 4. Next, we need to install some OpenCV-specific prerequisites. OpenCV is an image processing/computer vision library and therefore it needs to be able to load standard image file formats such as JPEG, PNG, TIFF, etc. The following image I/O packages will allow OpenCV to work with image files:

sudo apt-get install libjpeg-dev libpng-dev libtiff-dev


Step 5. Now let’s try to install libjasper-dev:

#sudo apt-get install libjasper-dev

If you receive error like this "E: Unable to locate package libjasper-dev"
Run these commands instead of:

sudo add-apt-repository "deb http://security.ubuntu.com/ubuntu xenial-security main"
sudo apt update
sudo apt install libjasper1 libjasper-dev


Step 6. Next, let’s include video I/O packages as we often work with video on the PyImageSearch blog. You’ll need the following packages so you can work with your camera stream and process video files:

sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev
sudo apt-get install libxvidcore-dev libx264-dev

Step 7. Let’s install GTK:

sudo apt-get install libgtk-3-dev

Step 8. I always recommend the following two libraries which will optimize various OpenCV functions:

sudo apt-get install libatlas-base-dev gfortran

Step 9. And finally, our last requirement is to install Python 3 headers and libraries:
#Attention, a result for python3 --version command is Python 3.7.3. Therefore,
sudo apt-get install python3.7-dev


Step 10. let’s download the official OpenCV release using wget:

cd ~
wget -O opencv.zip https://github.com/opencv/opencv/archive/3.4.4.zip
wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/3.4.4.zip

So, what’s the contrib repo?

The contrib repository contains algorithms such as SIFT, SURF, and others. In the past, these implementations were included in the default installation of OpenCV 2.4; however, they were moved beginning with OpenCV 3+.


Step 11. Now, let’s unzip the archives:

unzip opencv.zip
unzip opencv_contrib.zip


Step 12. Now let’s go ahead and rename the directories:

mv opencv-3.4.4 opencv
mv opencv_contrib-3.4.4 opencv_contrib


Step 13. Configure your Python 3 environment

wget https://bootstrap.pypa.io/get-pip.py
sudo apt install python3-testresources #Install first, why?
sudo python3 get-pip.py

If you get this Error during install python3 get-pip.py
ERROR: launchpadlib 1.10.6 requires testresources, which is not installed.



Step 14. Let’s go ahead and install virtualenv  and virtualenvwrapper now:

sudo pip install virtualenv virtualenvwrapper
sudo rm -rf ~/get-pip.py ~/.cache/pip


Step 15. To finish the install we need to update our  ~/.bashrc  file.

nano .bashrc

#Paste all this code below
# virtualenv and virtualenvwrapper
export WORKON_HOME=$HOME/.virtualenvs
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
source /usr/local/bin/virtualenvwrapper.sh

#Save by Ctr +O then Ctrl +X


#OR RUN ALL THIS, IT WILL APPEND INTO .bashrc file directly,

#echo -e "\n# virtualenv and virtualenvwrapper" >> ~/.bashrc
#echo "export WORKON_HOME=$HOME/.virtualenvs" >> ~/.bashrc
#echo "export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3" >> ~/.bashrc
#echo "source /usr/local/bin/virtualenvwrapper.sh" >> ~/.bashrc

Step 16. Next, source the ~/.bashrc  file:

source .bashrc


Step 17. Creating a virtual environment to hold OpenCV and additional packages

mkvirtualenv cv -p python3


Step 18. Let’s verify that we’re in the cv environment by using the workon command:

workon cv

#(cv) dthinh@ntu:~


Step 19. Install NumPy in your environment

pip install numpy


Step 20. Configure and compile OpenCV for Ubuntu 18.04

cd ~/opencv
mkdir build
cd build
cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D WITH_CUDA=OFF \
    -D INSTALL_PYTHON_EXAMPLES=ON \
    -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \
    -D OPENCV_ENABLE_NONFREE=ON \
    -D BUILD_EXAMPLES=ON ..


#You won’t see a “YES” marked next to every setting — that is normal. Be sure you don’t see any errors or your compile may fail (warnings are okay).

Step 21. Compiling OpenCV on Ubuntu 18.04

make -j4

#make -jx with x is number of cpu threads


Step 22. Installing and verifying OpenCV

sudo make install
sudo ldconfig


Step 23. To verify the install, sometimes I like to enter the following command in the terminal:

pkg-config --modversion opencv
#reply: 3.4.4


Step 24. Finish your Python+ OpenCV + Ubuntu 18.04 install

ls /usr/local/python/cv2/python-3.7/cv2.cpython-37m-x86_64-linux-gnu.so 


Step 25. Let’s rename them to simply cv2.so:

cd /usr/local/python/cv2/python-3.7
sudo mv cv2.cpython-37m-x86_64-linux-gnu.so cv2.so


Step 26. Our last sub-step is to sym-link our OpenCV cv2.so  bindings into our cv  virtual environment:

cd ~/.virtualenvs/cv/lib/python3.7/site-packages/
ln -s /usr/local/python/cv2/python-3.7/cv2.so cv2.so


Step 27. Testing your OpenCV 3 install on Ubuntu 18.04

cd ~

#workon cv 

#If your screen like this: (cv) dthinh@ntu:~/.virtualenvs/cv/lib/python3.7/site-packages$
#you don't need to run workon cv

python

#result like this
#Python 3.7.3 (default, Oct  7 2019, 12:56:13) 
#[GCC 8.3.0] on linux
#Type "help", "copyright", "credits" or "license" for more information.

>>> import cv2
>>> cv2.__version__

#result like this: '3.4.4' ----PERFECT----
>>> quit()
